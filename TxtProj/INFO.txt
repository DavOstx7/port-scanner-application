##################
: TCP_CONNECT_SCAN
Someone would use full TCP connection attempts to determine if a port is open on the target system. The scanning process involves completing a 'three-way handshake' with a remote port, and reports the port as closed if the full handshake cannot be established. An advantage of TCP connect scanning is that it works against any TCP/IP stack. Rather than sending a SYN packet and reviewing the headers it will ask the OS to establish a TCP connection to the 1000 common ports.
##############
: TCP_SYN_SCAN
This is far and away the most popular scan type because it the fastest way to scan ports of the most popular protocol (TCP). It is stealthier than connect scan (since it never completes TCP connections - 'three-way handshake'), and it works against all functional TCP stacks. Attempts a TCP SYN connection to 1000 of the most common ports.
##########
: UDP_SCAN
While most popular services on the Internet run over the TCP protocol, UDP services are widely deployed. DNS, SNMP, and DHCP (registered ports 53, 161/162, and 67/68) are three of the most common. UDP scanning is generally slower and more difficult than TCP
################
: SCTP_INIT_SCAN
SCTP is a relatively new alternative to the TCP and UDP protocols, combining most characteristics of TCP and UDP, and also adding new features like multi-homing and multi-streaming. It is mostly being used for SS7/SIGTRAN related services but has the potential to be used for other applications as well. The technique used in this scan often referred to as half-open scanning, because you don't open a full SCTP association. It also allows clear, reliable differentiation between the open, closed, and filtered states. It's the TCP SYN Scan of SCTP.
###############
: TCP_NULL_SCAN
Someone would use a TCP NULL scan to determine if ports are closed on the target machine. in addition to being fast, the major advantage of this scan type is its ability to scan through stateless firewall or ACL filters.
##################
: IP_PROTOCOL_SCAN
IP protocol scan allows you to determine which IP protocols (TCP, ICMP, IGMP, etc.) are supported by target machines. This isn't technically a port scan, since it cycles through IP protocol numbers rather than TCP or UDP port numbers.
##############
: TCP_ACK_SCAN
This scan is different than the others in that it never determines open (or even open|filtered) ports. It is used to map out firewall rulesets, determining whether they are stateful or not and which ports are filtered.
#################
: AGGRESSIVE_SCAN
Basically all in one. Aggressive scan enables OS detection, version detection, script scanning, and traceroute. This mode sends a lot more probes, and it is more likely to be detected, but provides a lot of valuable host information. This scan is slow compared to the other scans.
####################
: PORT_SPECIFICATION
What are ports? Ports are simply a software abstraction, used to distinguish between communication channels.
Similar to the way IP addresses are used to identify machines on networks, ports identify specific applications in use on a single machine.
For example, your web browser will by default connect to TCP port 80 of machines in HTTP URLs.
If you specify the secure HTTPS protocol instead, the browser will try port 443 by default.
The available port range is 0 to 65353. By default, Nmap will scan the most common 1,000 ports for each protocol.

---------------------------------------------SYNTAX + EXAMPLES------------------------------------------------------------
Syntaxes:
~for a single port to be scanned, enter: <port>
~for multiple ports to be scanned, enter: <port>,<port>,...,<port>
~for a port range to be scanned, enter: <port>-<port>
~for excluding specific ports or ranges, enter: exclude <port> OR exclude <port>, <port>,...,<port> OR exclude <port>-<port>
~for a fast scan that scan the 100 most popular ports, enter: fast 
~for scanning all the ports, enter: all
Examples:
1) 80
2) 21,22,8080
3) 1024-55555
4) exclude 90
5) exclude 80, 8080
6) exclude 0-1024
7) fast
8) all
---------------------------------------------------------------------------------------------------------------------------

###############
: TIME_TEMPLATE
The template names are paranoid (0), sneaky (1), polite (2), normal (3), aggressive (4), and insane (5).
The first two (0,1) are for IDS evasion. Polite mode (2) slows down the scan to use less bandwidth and target machine resources.
Normal mode (3) is the default and so does nothing. 
Aggressive mode (4) speeds scans up by making the assumption that you are on a reasonably fast and reliable network.
Finally, insane mode (5) assumes that you are on an extraordinarily fast network or are willing to sacrifice some accuracy for speed.

In conclusion, using a lower number would be better for a slower network and more accurate results (longer scan), 
while using a higher number would be better for a faster network but less accurate results (shorter scan).
###############
: TCP_TECHNIQUE
~TCP SYN scan
SYN scan is the default and most popular scan option for good reasons.
It can be performed quickly, scanning thousands of ports per second on a fast network not hampered by restrictive firewalls.
It is also relatively unobtrusive and stealthy since it never completes TCP connections.
SYN scan works against any compliant TCP stack rather than depending on idiosyncrasies of specific platforms

You send a SYN packet, as if you are going to open a real connection and then wait for a response.
A SYN/ACK indicates the port is listening (open), while a RST (reset) is indicative of a non-listener.
If no response is received after several retransmissions, the port is marked as filtered.
he port is also marked filtered if an ICMP unreachable error is recieved.

---------------------------------------------------------------------------------------------------------------------------

~TCP Connect Scan
Instead of writing raw packets as most other scan types do,
the scanner asks the underlying operating system to establish a connection with the target machine and port by issuing the connect system call.
This is the same high-level system call that web browsers, P2P clients, and most other network-enabled applications use to establish a connection.
It is part of a programming interface known as the Berkeley Sockets API.

*When SYN scan is available, it is usually a better choice*

---------------------------------------------------------------------------------------------------------------------------

~TCP Null, FIN, and Xmas Scans
These three scan types exploit a subtle loophole in the TCP RFC to differentiate between open and closed ports.
When scanning systems compliant with this RFC text, any packet not containing SYN, RST, or ACK bits will result
in a returned RST if the port is closed and no response at all if the port is open.
As long as none of those three bits are included, any combination of the other three (FIN, PSH, and URG) are OK.

Null Scan
Does not set any bits (TCP flag header is 0)

FIN Scan 
Sets just the TCP FIN bit.

Xmas Scan
Sets the FIN, PSH, and URG flags, lighting the packet up like a Christmas tree.

These three scan types are exactly the same in behavior except for the TCP flags set in probe packets. 
If an RST packet is received, the port is considered closed, while no response means it is open|filtered.
The port is marked filtered if an ICMP unreachable error (type 3, code 0, 1, 2, 3, 9, 10, or 13) is received.

The key advantage to these scan types is that they can sneak through certain non-stateful firewalls and packet filtering routers.
Another advantage is that these scan types are a little more stealthy than even a SYN scan.

---------------------------------------------------------------------------------------------------------------------------

~Window Scan
Window scan is exactly the same as ACK scan (used to map out firewall rulesets, determining whether they are stateful or not and which ports are filtered), 
except that it exploits an implementation detail of certain systems to differentiate open ports from closed ones,
rather than always printing unfiltered when a RST is returned.
It does this by examining the TCP Window field of the RST packets returned. 
*This scan relies on an implementation detail of a minority of systems out on the Internet, so you can't always trust it*

---------------------------------------------------------------------------------------------------------------------------

~Maimon Scan
This technique is exactly the same as NULL, FIN, and Xmas scans, except that the probe is FIN/ACK.
An RST packet should be generated in response to such a probe whether the port is open or closed.
However, it is noticed that many BSD-derived systems simply drop the packet if the port is open.

---------------------------------------------------------------------------------------------------------------------------

~Idle Scan
This advanced scan method allows for a truly blind TCP port scan of the target (meaning no packets are sent to the target from your real IP address). 
Instead, a unique side-channel attack exploits predictable IP fragmentation ID sequence generation on the zombie host,
to glean information about the open ports on the target.
IDS systems will display the scan as coming from the zombie machine you specify (which must be up and meet certain criteria).

---------------------------------------------------------------------------------------------------------------------------

~FTP Bounce Scan
An interesting feature of the FTP protocol (RFC 959) is support for so-called proxy FTP connections. 
This allows a user to connect to one FTP server, then ask that files be sent to a third-party server. 
Such a feature is ripe for abuse on many levels, so most servers have ceased supporting it. 
One of the abuses this feature allows is causing the FTP server to port scan other hosts. 
Simply ask the FTP server to send a file to each interesting port of a target host in turn. The error message will describe whether the port is open or not. 
This is a good way to bypass firewalls,
because organizational FTP servers are often placed where they have more access to other internal hosts than any old Internet host would.
*This vulnerability was widespread in 1997, but has largely been fixed. Vulnerable servers are still around, so it is worth trying when all else fails*
###########
: TCP_FLAGS
allows you to design your own scan by specifying arbitrary TCP flags. Let your creative juices flow.
Just mash together any combination of URG, ACK, PSH, RST, SYN, and FIN.
*Choosing all of them is usually not very useful for scanning*
################
: UDP_SCTP_TECHNIQUE
~UDP Scan
While most popular services on the Internet run over the TCP protocol, UDP services are widely deployed.
DNS, SNMP, and DHCP (registered ports 53, 161/162, and 67/68) are three of the most common.
Because UDP scanning is generally slower and more difficult than TCP, some security auditors ignore these ports. This is a mistake,
as exploitable UDP services are quite common and attackers certainly don't ignore the whole protocol.

UDP scan works by sending a UDP packet to every targeted port. For some common ports such as 53 and 161, 
a protocol-specific payload is sent to increase response rate, but for most ports the packet is empty unless a string is added to the payload.

-----------------------------------------------------------------------------------------------------------------------------
~SCTP INIT Scan
SCTP is a relatively new alternative to the TCP and UDP protocols, combining most characteristics of TCP and UDP,
and also adding new features like multi-homing and multi-streaming.
It is mostly being used for SS7/SIGTRAN related services but has the potential to be used for other applications as well.
The technique used in this scan often referred to as half-open scanning, because you don't open a full SCTP association.
It also allows clear, reliable differentiation between the open, closed, and filtered states. It's the TCP SYN Scan of SCTP.

-----------------------------------------------------------------------------------------------------------------------------

~COOKIE ECHO Scan
is a more advanced SCTP scan. It takes advantage of the fact that SCTP implementations should silently drop packets containing COOKIE ECHO chunks on open ports,
but send an ABORT if the port is closed. The advantage of this scan type is that it is not as obvious a port scan than an INIT scan.
Also, there may be non-stateful firewall rulesets blocking INIT chunks, but not COOKIE ECHO chunks.
The downside is that SCTP COOKIE ECHO scans cannot differentiate between open and filtered ports, leaving you with the state open|filtered in both cases.
############
: PAYLOAD_OPTION
This option lets you include a regular string as payload in sent packets. <string> can contain any string.
However, note that some characters may depend on your system's locale and the receiver may not see the same information.

---------------------------------------------SYNTAX + EXAMPLES------------------------------------------------------------
Syntaxes:
~To add a string, enter: <string>
*Do NOT enter a signle quote (').

Examples:
1) Hello World
2) Jimmy Jazz...
---------------------------------------------------------------------------------------------------------------------------
##################
: ADVANCED_OPTIONS
~Vulnerability Check
Nmap includes a suite of scripts (Nmap Scripting Engine, NSE) which may help us find security holes in our system.
This option will check for vulnerabilities. If you want a more specific check, go to Nmap Scripting Engine (NSE),
choose one (out of many), and activate through the terminal.

---------------------------------------------------------------------------------------------------------------------------

~Service/Version Detection
This detection uses nmap-services database (about 2,200 well-known services). 
The nmap-service-probes database contains probes for querying various services and match expressions to recognize and parse responses.
Nmap tries to determine the service protocol (e.g. FTP, SSH, Telnet, HTTP), the application name (e.g. ISC BIND, Apache httpd, Solaris telnetd),
the version number, hostname, device type (e.g. printer, router), the OS family (e.g. Windows, Linux).
When possible, Nmap also gets the Common Platform Enumeration (CPE) representation of this information.

*When Nmap receives responses from a service but cannot match them to its database,
it prints out a special fingerprint and a URL for you to submit it to if you know for sure what is running on the port.
Please take a couple minutes to make the submission so that your find can benefit everyone. Thanks to these submissions,
Nmap has about 6,500 pattern matches for more than 650 protocols*

-----------------------------------------------------------------------------------------------------------------------------

~OS (Operating System) Detection
One of Nmap's best-known features is remote OS detection using TCP/IP stack fingerprinting.
Nmap sends a series of TCP and UDP packets to the remote host and examines practically every bit in the responses.
After performing dozens of tests such as TCP ISN sampling, TCP options support and ordering, IP ID sampling, and the initial window size check,
Nmap compares the results to its nmap-os-db database of more than 2,600 known OS fingerprints and prints out the OS details if there is a match.
Each fingerprint includes a freeform textual description of the OS, and a classification which provides the vendor name (e.g. Sun),
underlying OS (e.g. Solaris), OS generation (e.g. 10), and device type (general purpose, router, switch, game console, etc).
Most fingerprints also have a Common Platform Enumeration (CPE) representation, like cpe:/o:linux:linux_kernel:2.6.

*If Nmap is unable to guess the OS of a machine, and conditions are good (e.g. at least one open port and one closed port were found),
Nmap will provide a URL you can use to submit the fingerprint if you know (for sure) the OS running on the machine.
By doing this you contribute to the pool of operating systems known to Nmap and thus it will be more accurate for everyone.*

-----------------------------------------------------------------------------------------------------------------------------

~Script Scan
NSE (Nmap Script Engine) is powered by the Lua programming language and a standard library designed for network information gathering.
Scripts running during this phase generally run once for each target host and port number that they interact with.
They commonly perform tasks such as detecting service vulnerabilities, malware discovery,
collecting more information from databases and other network services, and advanced version detection.

-----------------------------------------------------------------------------------------------------------------------------

~Packet-Trace
Prints a summary of every packet sent or received. This is often used for debugging,
but is also a valuable way for new users to understand exactly what happens under the covers.

*To avoid printing thousands of lines, you may want to specify a limited number of ports to scan*

-----------------------------------------------------------------------------------------------------------------------------

~Fragment Packets
Causes the requested scan (including host discovery scans) to use tiny fragmented IP packets.
The idea is to split up the TCP header over several packets to make it harder for packet filters,
intrusion detection systems, and other annoyances to detect what you are doing.

This Splits the packets into eight bytes or less after the IP header. So a 20-byte TCP header would be split into three packets.
Two with eight bytes of the TCP header, and one with the final four. Of course each fragment also has an IP header. 

*Some programs have trouble handling these tiny packets*

-----------------------------------------------------------------------------------------------------------------------------

~Badsum
Uses an invalid TCP, UDP or SCTP checksum for packets sent to target hosts. Since virtually all host IP stacks properly drop these packets,
any responses received are likely coming from a firewall or IDS that didn't bother to verify the checksum.

-----------------------------------------------------------------------------------------------------------------------------

~Verbosity Level
Increases the verbosity level, causing Nmap to print more information about the scan in progress.
Open ports are shown as they are found and completion time estimates are provided when Nmap thinks a scanwill take more than a few minutes.
Use it twice or more for even greater verbosity.

-----------------------------------------------------------------------------------------------------------------------------

~Debugging Level
Increases the debugging level, causing Nmap to print out details about its operation that can be useful for tracking down bugs or simply understanding how it works.
###################
